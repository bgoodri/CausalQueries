% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_query_to_nodal_type.R
\name{map_query_to_nodal_type}
\alias{map_query_to_nodal_type}
\title{Find which nodal types satisfy a query}
\usage{
map_query_to_nodal_type(model, query, join_by = "|")
}
\arguments{
\item{model}{A \code{causal_model}. A model object generated by \code{\link{make_model}}.}

\item{query}{A character string. An expression defining nodal types to interrogate \code{\link{reveal_outcomes}}}

\item{join_by}{A logical operator. Used to connect causal statements: \emph{AND} ('&') or \emph{OR} ('|'). Defaults to '|'.}
}
\value{
A list containing the types and the evaluated expression. `manipulated_outcomes` are the nodes on the left of a [] expression
}
\description{
Find which nodal types satisfy a query
}
\examples{
model <- make_model('X->Y')

map_query_to_nodal_type(model, '(Y[X=0] > Y[X=1])')
map_query_to_nodal_type(model, '(Y[X=0] >= Y[X=1])')

model <- make_model('X -> M -> Y; X->Y')
query <- '(Y[X=0] > Y[X=1])'
x <- map_query_to_nodal_type(model, query)

query <- '(Y[X=0, M = .] > Y[X=1, M = 0])'
x <- map_query_to_nodal_type(model, query)

query <- '(Y[] == 1)'
x <- map_query_to_nodal_type(model, query)
x <- map_query_to_nodal_type(model, query, join_by = '&')

# Root nodes specified with []
map_query_to_nodal_type(model, '(X[] == 1)')
\dontrun{
map_query_to_nodal_type(model, 'X == 1')
}

query <- '(M[X=1] == M[X=0])'
x <- map_query_to_nodal_type(model, query)

# Complements
model <- make_model('M->Y; X->Y')
query <- complements('X', 'M', 'Y')
map_query_to_nodal_type(model, query)
}
\keyword{internal}
